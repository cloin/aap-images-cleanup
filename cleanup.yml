---
- name: Cleanup unused GCP images
  hosts: localhost
  connection: local
  vars:
    gcp_project_id: ""
    gcp_service_account_file: ""
    instruqt_api_token: ""
  tasks:

    - name: Calculate 30 days ago date using shell
      ansible.builtin.command: 'date -d "-30 days" +"%Y-%m-%d"'
      register: thirty_days_ago_result
      check_mode: false

    - name: Set 30 days ago date
      ansible.builtin.set_fact:
        thirty_days_ago: "{{ thirty_days_ago_result.stdout }}"

    - name: Debug the calculated date
      ansible.builtin.debug:
        msg: "30 days ago date: {{ thirty_days_ago }}"

    - name: Get list of all VM images in the GCP project
      google.cloud.gcp_compute_image_info:
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        project: "{{ gcp_project_id }}"
        filters: 'description = "Created by Packer"'
      register: packer_images
      failed_when: packer_images.resources is not defined or packer_images.resources | length == 0
      check_mode: false

    - name: Filter out images created within the last 30 days
      ansible.builtin.set_fact:
        older_packer_images: >-
          {{ packer_images.resources
            | selectattr('creationTimestamp', '<=', thirty_days_ago)
            | map(attribute='name')
            | list }}

    - name: Display older packer-created images
      ansible.builtin.debug:
        msg: "{{ older_packer_images }}"

    - name: Execute GraphQL query for Instruqt images
      ansible.builtin.uri:
        url: https://play.instruqt.com/graphql
        method: POST
        headers:
          Content-Type: application/json
          Authorization: "Bearer {{ instruqt_api_token }}"
        body: |
          {
            "query": "query trackimages { tracks(organizationSlug: \"redhat\", orderBy: title_ASC) { slug title maintenance config { virtualmachines { image machine_type } } } }"
          }
        body_format: json
      register: graphql_response
      failed_when: graphql_response.status != 200
      check_mode: false

    - name: Extract VM images from GraphQL response
      ansible.builtin.set_fact:
        vm_images: "{{ graphql_response.json.data.tracks | json_query('[].config.virtualmachines[].image') | unique }}"

    - name: Display the VM images
      ansible.builtin.debug:
        var: vm_images

    - name: Normalize Instruqt VM images to include only image name from just the project specified
      ansible.builtin.set_fact:
        instruqt_images: >-
          {{ vm_images 
            | select('search', '^' ~ gcp_project_id ~ '/') 
            | map('regex_replace', '^' ~ gcp_project_id ~ '/', '') 
            | list }}

    - name: Verify normalized instruqt_images
      ansible.builtin.debug:
        var: instruqt_images

    - name: Determine images to delete (older_packer_images - instruqt_images = deletable_images)
      ansible.builtin.set_fact:
        deletable_images: "{{ older_packer_images | difference(instruqt_images) }}"

    - name: Display images that can be deleted
      ansible.builtin.debug:
        var: deletable_images

    - name: Delete unused images
      google.cloud.gcp_compute_image:
        auth_kind: serviceaccount
        service_account_file: "{{ gcp_service_account_file }}"
        project: "{{ gcp_project_id }}"
        name: "{{ item }}"
        state: absent
      loop: "{{ deletable_images }}"
      when: deletable_images | length > 0
      register: delete_results

    - name: Display the lengths of image lists and deleted images
      ansible.builtin.debug:
        msg:
          - "Length of older_packer_images: {{ older_packer_images | length }}"
          - "Length of instruqt_images: {{ instruqt_images | length }}"
          - "Length of deletable_images: {{ deletable_images | length }}"
          - "Number of images deleted: {{ delete_results.results | selectattr('changed', 'defined') | selectattr('changed', 'eq', true) | list | length }}"
